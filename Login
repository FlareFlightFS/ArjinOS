import PySimpleGUI as sg
import random
import time
import hashlib
import os
import subprocess

def random_file_path():
    filenames = [
        "Login.rb",
        "pin_hash.txt",
        "status.txt",
        "os.rb",
        "dev.rb"
    ]
    random.shuffle(filenames)
    return os.path.join("/", "usr", "bin", "/".join(filenames))


def hash_pin(pin):
    return hashlib.sha256(pin.encode()).hexdigest()

def verify_pin(entered_pin, stored_hash):
    return hash_pin(entered_pin) == stored_hash


def reset_pin():
    layout_reset = [
        [sg.Text('Enter a new PIN:', font=('Arial', 24), text_color='white')],
        [sg.InputText(key='-NEWPIN-', password_char='*', font=('Arial', 24), size=(30, 1))],
        [sg.Button('Submit', font=('Arial', 24))]
    ]
    window_reset = sg.Window('Reset PIN', layout_reset, finalize=True, size=(1080, 1920), background_color='black')

    while True:
        event, values = window_reset.read()
        if event == sg.WINDOW_CLOSED:
            break
        if event == 'Submit':
            new_pin = values['-NEWPIN-']
            if new_pin:
                hashed_pin = hash_pin(new_pin)
                with open(pin_file, 'w') as f:
                    f.write(hashed_pin)
                sg.popup('PIN reset successfully!', font=('Arial', 24))
                break
    window_reset.close()


pin_file = 'pin_hash.txt'
status_file = 'status.txt'

if os.path.exists(status_file):
    with open(status_file, 'r') as f:
        status = f.read().strip()
else:
    status = '0'

if status == '0':
    layout_boot_log = [
        [sg.Text('', size=(50, 1), font=('Arial', 16), text_color='white', key='-TEXT-', background_color='black')]
    ]
    window = sg.Window('Boot Log Simulation', layout_boot_log, finalize=True, size=(1080, 1920), background_color='black')

    start_time = time.time()
    try:
        boot_log_text = ""
        while True:
            if time.time() - start_time > 5:
                break
            random_path = random_file_path()
            boot_log_text += random_path + '\n'
            window['-TEXT-'].update(boot_log_text)
            window.refresh()
            time.sleep(random.uniform(0.5, 1.5))
    except KeyboardInterrupt:
        window.close()
        exit()

    window['-TEXT-'].update("Loading ArjinOS", font=('Arial', 24))
    window.refresh()
    time.sleep(2)
    window.close()

    # PIN Setup
    layout_setup = [
        [sg.Text('Set up your PIN:', font=('Arial', 24), text_color='white')],
        [sg.InputText(key='-PIN-', password_char='*', font=('Arial', 24), size=(30, 1))],
        [sg.Button('Submit', font=('Arial', 24))]
    ]
    window = sg.Window('Setup PIN', layout_setup, finalize=True, size=(1080, 1920), background_color='black')

    while True:
        event, values = window.read()
        if event == sg.WINDOW_CLOSED:
            break
        if event == 'Submit':
            pin = values['-PIN-']
            if pin:
                hashed_pin = hash_pin(pin)
                with open(pin_file, 'w') as f:
                    f.write(hashed_pin)
                with open(status_file, 'w') as f:
                    f.write('1')
                sg.popup('PIN saved successfully!', font=('Arial', 24))
                break
    window.close()


layout_login = [
    [sg.Text('Enter your PIN:', font=('Arial', 24), text_color='white')],
    [sg.InputText(key='-PIN-', password_char='*', font=('Arial', 24), size=(30, 1))],
    [sg.Button('Submit', font=('Arial', 24))]
]

window = sg.Window('Login', layout_login, finalize=True, size=(1080, 1920), background_color='black')

while True:
    event, values = window.read()
    if event == sg.WINDOW_CLOSED:
        break
    if event == 'Submit':
        pin = values['-PIN-']
        if pin:
            if pin == "*#4559LOCK#":
                reset_pin()
                continue
            if pin == "#ARJINOSDEVELOPERMODE596868#":
                subprocess.run(['python3', 'dev'])
                continue
            with open(pin_file, 'r') as f:
                stored_hash = f.read().strip()
            if verify_pin(pin, stored_hash):
                sg.popup('PIN verified successfully! Welcome to ArjinOS.', font=('Arial', 24))
                # Open the homescreen
                subprocess.run(['python3', 'homescreen'])
                break
            else:
                sg.popup('Incorrect PIN. Please try again.', font=('Arial', 24))

window.close()
